@@ -0,0 +1,186 @@
//John Michael DiDonato
//CMPSC 121 Section 002
// 2-17-2014
//Homework 3

//Program Descrpition: 
//This program simulates the battles that occur in the game of risk.
//There is a defending and attacking army and the sizes of each respective army
//is determined by the user. the attack by roll a dice for every army unit he has
//but may not roll more than three if he has more than three army units.
//similarly the defender can roll up 1 dice if they has 1 army unit and can roll
//two dice if they have 2 or more army units.
// The highest rolls from the attacker and defender are comapared and whoever
//has less loses an army unit. The next highest rolls are compared and the loser
//loses an army unit. this second comparison only occurs if each player both rolled
//at least two dice. This event is called a skirmish and the user dictates how
//many skirmishes happen, until the battle is over and someone loses all their
//army units or the user can withdraw or continue to skirmish until a specific
//number of their attacking army units are left


#include <iostream>
#include <iomanip>
using namespace std;

//function declarations
void skirmish(int& , int& );
int rollDie();
void sortThree(int& , int& , int& );

int main()
{

int attackingArmy, defendingArmy, choice, reserve;	//declare variables
char response;

do{          //begining of do-while loop that allows the user to begin another battle

cout << "Please enter the attacking and defending army sizes: " << endl; // ask user to enter respective sizes of army
cin >> attackingArmy >> defendingArmy;

do{          //begining of do-while loop that is used for option 1
cout << "Please choose one of the following:" << endl;       //give user choice of which option they liked to do
cout << setw(3) << "1" << setw(38) << "attack for one round only" << endl;
cout << setw(3) << "2" << setw(57) << "attack until one army is completely defeated" << endl;
cout << setw(3) << "3" << setw(47) << "attack until only armies attacking" << endl;
cout << setw(3) << "4" << setw(37) << "withdraw from the battle" << endl;

cin >> choice;						//user input is recorded

if (choice == 1)			//if option 1 is choosen, the function skirmish is called once, and user is returned to option list
{
	skirmish(attackingArmy, defendingArmy);
}

if (choice == 2)                                    //option 2, skirmish is continually called until of the the army's is defeated and they have zero units
{
	while(attackingArmy > 0 && defendingArmy > 0)
	{
		skirmish(attackingArmy, defendingArmy); //arguments are the units in each army
	}
}

if (choice == 3)       //option 3, skirmish is called until the attacking units reaches a specified reserve number or the defending army is defeated
{
	cout << "How many do you wish to keep in reserve? ";
	cin >> reserve;

	while (attackingArmy > reserve && defendingArmy > 0)
	{
		skirmish(attackingArmy, defendingArmy);
	}
}
//loop for option 1 and option 3 continues as long as option 1 or 3 is choosen and both army units are bigger than zero
} while ((choice == 1 || choice == 3 ) && attackingArmy > 0 && defendingArmy > 0);

if (choice == 4) //option 4 user chooses to leave battle
{
	cout << "You withdrew from the battle!" << endl;
}

cout << "Simulate another battle?  (y/n) "; //user asked if they would they like to continue with another battle
cin >> response;

}while( response == 'y');

return 0;

}
//function skirmish simulates one skrimish by rolling dice as described in the program description
void skirmish(int& aa, int& da) //reference parameters that modify the values of the units of attacking and defending armies
{
	
	int aaHigh, aaMid, aaLow; //variables for dice rolls for attacking army
	int daHigh, daMid, daLow;  //variable for dice rools for defending army
	int zero = 0; //varibale with value of zero, act as a placeholder for sortthree function
	int aaLost = 0; //variable for number of units lost in a skirmish for attacking army
	int daLost = 0; //variable for number of units lost ina skirmish for defending army

	aaHigh = rollDie();       //call rollDie function for each of these variables to generate a random number 1-6, like rolling a die
	aaMid = rollDie();
	aaLow = rollDie();
	sortThree(aaHigh, aaMid, aaLow);

	if(aa > 2)  //output what the attacking team rolled, the output depends on how many units the attacking army has
		cout << "Attacker Dice: " << aaHigh << " " << aaMid << " " << aaLow << endl;
	else
	  {
		  if(aa == 2)
			  cout << "Attacker Dice: " << aaHigh << " " << aaMid << endl;
		  else
			  cout << "Attacker Dice: " << aaHigh << endl;
	  }

	daHigh = rollDie(); //call rollDie to assign random values for the defensive army dice
	daMid = rollDie();
	sortThree(daHigh, daMid, zero);

	if(da > 1)   //output what defending team rolled
		cout << "Defender Dice: " << daHigh << " " << daMid <<  endl;
	else
		cout << "Defender Dice: " << daHigh << endl;



	if(aa > 1)           
	{
		//if attacking army is great than one then at least the highest dice rolled for each army will be compared
		if(aaHigh > daHigh)
			daLost++;
		else                 //depending one whichever dice is larger the loser(the lower value dice) army will lose a units
			aaLost++;

		if(da > 1)
		{
			//if defensive army has more than one unit and attacking unit has more than 1 than both the highest dices  rolled for each army will be compared
			//but also the seocnd highest
			if(aaMid > daMid)
				daLost++;
			else   //depending one whichever dice is larger the loser(the lower value dice) army will lose a units
				aaLost++;
		}
	}
	else  //if attacking army does not have greater than one unit then still the highest valued dice for each army will be compared
	{
		if(aaHigh > daHigh)
			daLost++;
		else           //comparing values, and making necessary updates to army units as described above
			aaLost++;
	}


	if (aaLost > 0)                          //outputs the loses of the attacking team if any
	cout << "Attacking Army loses: " << aaLost << endl;

	if(daLost > 0)                          //outputs the loses of the defending team if any
	cout << "Defending Army loses: " << daLost << endl;
	
	//recalculates remainders for each army then outputs them
	aa = aa - aaLost; 
	da = da - daLost;
	cout << "Remaining: Attacker = " << aa << "  Defender = " << da << endl << endl;


	

}

int rollDie()  //function that automatically returns a random number between 1-6 like rolling adice
{
  int randomRoll;
  randomRoll = rand() % 6 + 1;
  return randomRoll;
}

//sort the dice values inorder for larges to smallest
void sortThree (int& die1, int& die2, int& die3) //reference parameters that modifies the values of dice rolls themselves so to put them in order
{
	if (die2 > die1)
		swap(die2, die1);
	if (die3 > die2)
		swap(die2, die3);
	if(die2 > die1)
		swap(die2,die1);
}

